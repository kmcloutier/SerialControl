<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="SerialControl" default="default" basedir=".">
    <description>Builds, tests, and runs the project SerialControl.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="SerialControl-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <target name="-pre-init">
        <!-- tell the compiler about our library -->
        <property name="javac.compilerargs" value="-bootclasspath '${libs.JanosClasses.classpath}'"/>
        
        <!-- set a property for the INTEG SDK -->
        <property name="janossdk.home" value="C:/INTEG/JANOS_SDK"/>

        <!-- set a property for the javadepencies application -->
        <property name="janossdk.javadependencies" value="${janossdk.home}/JavaDependencies.exe"/>
        
        <!-- set a property for the version incrementor application -->
        <property name="janossdk.versionincrementor" value="${janossdk.home}/IncrementVersion.exe"/>
        <!-- set a property for the version incrementor application -->
        <property name="versionfile" value="'${basedir}/src/com/integ/serialcontrol/Assemblyinfo.java'"/>
    </target>
     
     
    <target name="-pre-compile">
        <!-- before we compile the application we need to update the build time in the 
        assembly info file so we log the build time -->
        <echo>Updating Build Time</echo>
        <exec dir="" resolveexecutable="true" executable="${janossdk.versionincrementor}">
            <arg line="'Update-build-time' ${versionfile}"/>
        </exec>
    </target>
    
    
    <target name="-pre-jar">
        <!-- before we build the JAR file we need to get all of the classes out of the 
        library that our application depends on -->
        <echo>Update classes directory with library dependencies</echo>
        <exec dir="" resolveexecutable="true" executable="${janossdk.javadependencies}">
            <arg line="${build.classes.dir} '${libs.INTEG.Common.classpath}'"/>
        </exec>
    </target>
    
            
    <target name="-post-jar">
        <!-- The build was successful.  we will now auto-increment the portion of the
        version number that follows the /*//*/ pattern -->
        <echo>Updating Assembly Information</echo>
        <exec dir="" resolveexecutable="true" executable="${janossdk.versionincrementor}">
            <arg line="'${basedir}' ${versionfile}"/>
        </exec>
        
        <echo>Adding appinfo.ini to jar...</echo>
        <jar destfile="${dist.jar}" update="true">
            <fileset dir="${basedir}">
                <include name="appinfo.ini"/>
            </fileset>
        </jar>

        <!-- copies the built JAR file out of the dist directory and into the root of the 
        project folder -->
        <copy file="${dist.jar}" todir="."/>
        
        <echo>GetVersion</echo>
        <exec dir="" resolveexecutable="true" executable="${janossdk.versionincrementor}">
            <arg line="'move-jar-with-version' ${versionfile} '${basedir}' '${dist.jar}' '${application.title}-{VERSION}.jar'"/>
        </exec>
    </target>
    
</project>
